name: Slack Release BOT
author: Gershon Alvais
description: Slack about new GitHub releases. Streamline release alerts for your team seamlessly.
inputs:
  tag:
    required: true
    type: string
  channel:
    required: true
    type: string
  appName:
    required: true
    type: string
  jiraBaseUrl:
    description: Jira base url
    required: true
    type: string
    default: "https://tricentis.atlassian.net"
  jiraProjectKey:
    description: Jira project key
    required: true
    type: string
  repoOwner:
    required: true
    type: string
  repoName:
    required: true
    type: string
  webhook_url:
    required: true
    type: string
    description: Slack webhook url

runs:
  using: "composite"
  steps:
    - name: Get Release
      id: get-release
      uses: actions/github-script@v6
      with:
        script: |
          const tag = '${{ inputs.tag }}';
          const release = await github.rest.repos.getReleaseByTag({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag: tag
          });
          if (!release || !release.data.body) {
              console.error('Invalid release');
              return;
          }
          core.setOutput('release', JSON.stringify(release));

    - name: Get Release and Format message
      id: format
      uses: actions/github-script@v6
      with:
        release: ${{ steps.get-release.outputs.release }}
        script: |
          const release = JSON.parse(core.getInput('release'));

          // Helper functions
          const getJiraLink = (ticket) => `<${jiraBaseUrl}/browse/${ticket}|${ticket}>`;

          const getPrLink = (prNumber) => `<https://github.com/${repoOwner}/${repoName}/pull/${prNumber}|#${prNumber}>`;

          // Cache reusable values
          const channel = '${{ inputs.channel }}';
          const appName = '${{ inputs.appName }}';
          const jiraBaseUrl = '${{ inputs.jiraBaseUrl }}';
          const repoOwner = '${{ inputs.repoOwner }}';
          const repoName = '${{ inputs.repoName }}';
          const jiraProjectKey = '${{ inputs.jiraProjectKey }}';

          let body = release.data.body;

          // Replace headers
          body = body.replace(/## (.+)/g, '*$1*');

          // Remove extra HTML
          body = body.replace(/<[^>]*>/gm, '');

          // Remove extra lines
          body = body.replace(/\n{2,}/g, '\n');

          // Replace Jira tickets with links
          const jiraRegex = new RegExp(`(${jiraProjectKey}-\\d+)`, 'g');
          body = body.replace(jiraRegex, (match) => {
            return getJiraLink(match);
          });

          // Replace PR numbers with links
          const prNumberRegex = /#(\d+)/g;
          body = body.replace(prNumberRegex, (match, prNumber) => {
            return getPrLink(prNumber);
          });

          // Handle empty Uncategorized
          const uncategorizedSection = body.match(/Uncategorized\r\n([\s\S]*?)(?=\*\w|$)/);
          if (uncategorizedSection && uncategorizedSection[1].trim() === '') {
            body = body.replace(/Uncategorized\r\n([\s\S]*?)(?=\*\w|$)/, '');
          }

          // Format PR matches
          const prRegex = /- \[(${jiraProjectKey}-\d+)\]\(https:\/\/github\.com\/.+\/pull\/(\d+)\) (.+):\s(.+)/g;
          let prMatch;
          while ((prMatch = prRegex.exec(body)) !== null) {
            const prNumber = prMatch[2];
            const prLink = getPrLink(prNumber);
            const jiraTicket = prMatch[1];
            const jiraLink = getJiraLink(jiraTicket);
            const newFormat = `${jiraLink}: ${prMatch[3]} ${prMatch[4]} ${prLink}`;
            body = body.replace(prMatch[0], newFormat);
          }

          // Construct payload
          const payload = {
            channel,
            text: `âœ… New *${appName}* Release <${release.data.html_url}|${release.data.tag_name}>\n${body}`,
          };

          core.setOutput('payload', JSON.stringify(payload));
          console.log("payload output:", payload);

    - name: Send Release notify to Slack
      id: slack_notification
      shell: bash
      run: |
        curl -H "Content-type: application/json" --data '${{ steps.format.outputs.payload }}' ${{ inputs.webhook_url }}